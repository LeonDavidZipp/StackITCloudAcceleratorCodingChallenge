// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderService HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	forwarderservice "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/forwarder_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildForwardRequest instantiates a HTTP request object with method and path
// set to call the "ForwarderService" service "forward" endpoint
func (c *Client) BuildForwardRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ForwardForwarderServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ForwarderService", "forward", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeForwardRequest returns an encoder for requests sent to the
// ForwarderService forward server.
func EncodeForwardRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*forwarderservice.Message)
		if !ok {
			return goahttp.ErrInvalidType("ForwarderService", "forward", "*forwarderservice.Message", v)
		}
		body := NewForwardRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("ForwarderService", "forward", err)
		}
		return nil
	}
}

// DecodeForwardResponse returns a decoder for responses returned by the
// ForwarderService forward endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeForwardResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ForwarderService", "forward", resp.StatusCode, string(body))
		}
	}
}
