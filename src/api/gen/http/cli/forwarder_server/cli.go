// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderServer HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	forwarderservicec "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/http/forwarder_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `forwarder-service forward
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` forwarder-service forward --body '{
      "description": "Perspiciatis et.",
      "name": "Exercitationem cumque eius minus perferendis.",
      "type": "Qui ut laborum aut."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		forwarderServiceFlags = flag.NewFlagSet("forwarder-service", flag.ContinueOnError)

		forwarderServiceForwardFlags    = flag.NewFlagSet("forward", flag.ExitOnError)
		forwarderServiceForwardBodyFlag = forwarderServiceForwardFlags.String("body", "REQUIRED", "")
	)
	forwarderServiceFlags.Usage = forwarderServiceUsage
	forwarderServiceForwardFlags.Usage = forwarderServiceForwardUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "forwarder-service":
			svcf = forwarderServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "forwarder-service":
			switch epn {
			case "forward":
				epf = forwarderServiceForwardFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "forwarder-service":
			c := forwarderservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "forward":
				endpoint = c.Forward()
				data, err = forwarderservicec.BuildForwardPayload(*forwarderServiceForwardBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// forwarder-serviceUsage displays the usage of the forwarder-service command
// and its subcommands.
func forwarderServiceUsage() {
	fmt.Fprintf(os.Stderr, `The forwarder service forwards warnings to the appropriate channel
Usage:
    %[1]s [globalflags] forwarder-service COMMAND [flags]

COMMAND:
    forward: Forwards a warning to the appropriate channel

Additional help:
    %[1]s forwarder-service COMMAND --help
`, os.Args[0])
}
func forwarderServiceForwardUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] forwarder-service forward -body JSON

Forwards a warning to the appropriate channel
    -body JSON: 

Example:
    %[1]s forwarder-service forward --body '{
      "description": "Perspiciatis et.",
      "name": "Exercitationem cumque eius minus perferendis.",
      "type": "Qui ut laborum aut."
   }'
`, os.Args[0])
}
