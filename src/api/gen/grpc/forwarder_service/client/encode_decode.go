// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderService gRPC client encoders and decoders
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package client

import (
	"context"

	forwarderservice "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/forwarder_service"
	forwarder_servicepb "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/grpc/forwarder_service/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildForwardFunc builds the remote method to invoke for "ForwarderService"
// service "forward" endpoint.
func BuildForwardFunc(grpccli forwarder_servicepb.ForwarderServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Forward(ctx, reqpb.(*forwarder_servicepb.ForwardRequest), opts...)
		}
		return grpccli.Forward(ctx, &forwarder_servicepb.ForwardRequest{}, opts...)
	}
}

// EncodeForwardRequest encodes requests sent to ForwarderService forward
// endpoint.
func EncodeForwardRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*forwarderservice.Message)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ForwarderService", "forward", "*forwarderservice.Message", v)
	}
	return NewProtoForwardRequest(payload), nil
}
