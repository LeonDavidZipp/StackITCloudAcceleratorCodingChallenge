// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderService gRPC client
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package client

import (
	"context"

	forwarder_servicepb "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/grpc/forwarder_service/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli forwarder_servicepb.ForwarderServiceClient
	opts    []grpc.CallOption
} // NewClient instantiates gRPC client for all the ForwarderService service
// servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: forwarder_servicepb.NewForwarderServiceClient(cc),
		opts:    opts,
	}
} // Forward calls the "Forward" function in
// forwarder_servicepb.ForwarderServiceClient interface.
func (c *Client) Forward() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildForwardFunc(c.grpccli, c.opts...),
			EncodeForwardRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}
