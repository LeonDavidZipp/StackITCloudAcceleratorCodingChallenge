// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderService gRPC client CLI support package
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package client

import (
	"encoding/json"
	"fmt"

	forwarderservice "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/forwarder_service"
	forwarder_servicepb "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/grpc/forwarder_service/pb"
)

// BuildForwardPayload builds the payload for the ForwarderService forward
// endpoint from CLI flags.
func BuildForwardPayload(forwarderServiceForwardMessage string) (*forwarderservice.Message, error) {
	var err error
	var message forwarder_servicepb.ForwardRequest
	{
		if forwarderServiceForwardMessage != "" {
			err = json.Unmarshal([]byte(forwarderServiceForwardMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Qui ex temporibus voluptatum sunt.\",\n      \"name\": \"Adipisci ullam dolorem omnis doloribus.\",\n      \"type\": \"Eum ut ut dolores sit quo.\"\n   }'")
			}
		}
	}
	v := &forwarderservice.Message{
		Type:        message.Type,
		Name:        message.Name,
		Description: message.Description,
	}

	return v, nil
}
