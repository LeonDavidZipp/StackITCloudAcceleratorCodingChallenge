// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderService gRPC server
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package server

import (
	"context"
	"errors"

	forwarderservice "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/forwarder_service"
	forwarder_servicepb "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/grpc/forwarder_service/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the forwarder_servicepb.ForwarderServiceServer interface.
type Server struct {
	ForwardH goagrpc.UnaryHandler
	forwarder_servicepb.UnimplementedForwarderServiceServer
}

// New instantiates the server struct with the ForwarderService service
// endpoints.
func New(e *forwarderservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		ForwardH: NewForwardHandler(e.Forward, uh),
	}
}

// NewForwardHandler creates a gRPC handler which serves the "ForwarderService"
// service "forward" endpoint.
func NewForwardHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeForwardRequest, EncodeForwardResponse)
	}
	return h
}

// Forward implements the "Forward" method in
// forwarder_servicepb.ForwarderServiceServer interface.
func (s *Server) Forward(ctx context.Context, message *forwarder_servicepb.ForwardRequest) (*forwarder_servicepb.ForwardResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "forward")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ForwarderService")
	resp, err := s.ForwardH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "InvalidNotificationType":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*forwarder_servicepb.ForwardResponse), nil
}
