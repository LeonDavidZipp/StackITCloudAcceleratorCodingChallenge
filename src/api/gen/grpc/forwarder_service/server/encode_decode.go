// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderService gRPC server encoders and decoders
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package server

import (
	"context"

	forwarderservice "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/forwarder_service"
	forwarder_servicepb "github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/gen/grpc/forwarder_service/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeForwardResponse encodes responses from the "ForwarderService" service
// "forward" endpoint.
func EncodeForwardResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoForwardResponse()
	return resp, nil
}

// DecodeForwardRequest decodes requests sent to "ForwarderService" service
// "forward" endpoint.
func DecodeForwardRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *forwarder_servicepb.ForwardRequest
		ok      bool
	)
	{
		if message, ok = v.(*forwarder_servicepb.ForwardRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ForwarderService", "forward", "*forwarder_servicepb.ForwardRequest", v)
		}
	}
	var payload *forwarderservice.Notification
	{
		payload = NewForwardPayload(message)
	}
	return payload, nil
}
