// Code generated by goa v3.19.1, DO NOT EDIT.
//
// ForwarderService endpoints
//
// Command:
// $ goa gen
// github.com/LeonDavidZipp/StackITCloudAcceleratorCodingChallenge/src/api/design
// --output ./src/api

package forwarderservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "ForwarderService" service endpoints.
type Endpoints struct {
	Forward goa.Endpoint
}

// NewEndpoints wraps the methods of the "ForwarderService" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Forward: NewForwardEndpoint(s),
	}
}

// Use applies the given middleware to all the "ForwarderService" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Forward = m(e.Forward)
}

// NewForwardEndpoint returns an endpoint function that calls the method
// "forward" of service "ForwarderService".
func NewForwardEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Message)
		return nil, s.Forward(ctx, p)
	}
}
